name: DAPS CI/CD

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, '3.10', '3.11']

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov codecov
        pip install -e .
    
    - name: Run tests with coverage
      run: |
        pytest tests/ --cov=daps --cov-report=xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  benchmark:
    runs-on: ubuntu-latest
    needs: test
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-benchmark matplotlib seaborn pandas
        pip install -e .
    
    - name: Run benchmarks
      run: |
        pytest examples/benchmark.py --benchmark-json output.json
    
    - name: Store benchmark result
      uses: benchmark-action/github-action-benchmark@v1
      with:
        tool: 'pytest'
        output-file-path: output.json
        github-token: ${{ secrets.GITHUB_TOKEN }}
        auto-push: true
        comment-on-alert: true
        fail-on-alert: false
        alert-threshold: '150%'
        summary-always: true

  build-paper:
    runs-on: ubuntu-latest
    needs: test
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install LaTeX
      run: |
        sudo apt-get update
        sudo apt-get install -y texlive-latex-base texlive-fonts-recommended texlive-fonts-extra texlive-latex-extra
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r paper/requirements.txt
        pip install -e .
    
    - name: Create directories
      run: |
        mkdir -p paper/figures
        mkdir -p docs/assets
    
    - name: Generate figures
      run: |
        cd paper
        python generate_logo.py
        python generate_figures.py
    
    - name: Build paper
      run: |
        cd paper
        mkdir -p build
        pdflatex -interaction=nonstopmode -output-directory=build daps_paper.tex
        pdflatex -interaction=nonstopmode -output-directory=build daps_paper.tex
        cp build/daps_paper.pdf ../docs/assets/
    
    - name: Upload paper PDF
      uses: actions/upload-artifact@v3
      with:
        name: daps-paper
        path: paper/build/daps_paper.pdf

  build-docs:
    runs-on: ubuntu-latest
    needs: [build-paper, benchmark]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    permissions:
      contents: read
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install mkdocs mkdocs-material mkdocstrings mkdocstrings-python
    
    - name: Download paper PDF
      uses: actions/download-artifact@v3
      with:
        name: daps-paper
        path: docs/assets
    
    - name: Copy figures to docs
      run: |
        mkdir -p docs/assets
        cp paper/figures/* docs/assets/ || true
    
    - name: Build documentation
      run: |
        mkdocs build
    
    - name: Setup Pages
      uses: actions/configure-pages@v2
    
    - name: Upload artifact
      uses: actions/upload-pages-artifact@v1
      with:
        path: 'site'
    
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v1
  
  build-package:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build package
      run: |
        python -m build
    
    - name: Check package
      run: |
        twine check dist/*
    
    - name: Upload package artifact
      uses: actions/upload-artifact@v3
      with:
        name: daps-package
        path: dist/ 