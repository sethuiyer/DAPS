# _daps.pyx
# distutils: language = c++
# cython: language_level=3

import numpy as np
cimport numpy as np
from libcpp.vector cimport vector
from libcpp.string cimport string
from libcpp cimport bool
from libcpp.functional cimport function

# Use cython's pair instead of tuple
from libcpp.pair cimport pair

import cython
from cpython.ref cimport PyObject

# Dictionary to store Python callback functions
cdef dict _callback_registry = {}

# Define C++ functions from daps.cpp
cdef extern from "daps.cpp":
    # Built-in test functions
    double recursive_fractal_cliff_valley(double x, double y, double z) nogil
    double rosenbrock_3d(double x, double y, double z) nogil
    double sphere_function(double x, double y, double z) nogil
    double ackley_function(double x, double y, double z) nogil
    double rastrigin_function(double x, double y, double z) nogil
    
    # Define a struct to hold the results
    cdef struct DAPSResult:
        vector[double] x
        double fun_val
        int nfev
        int nit
        bool success
        int final_prime_idx_x
        int final_prime_idx_y
        int final_prime_idx_z
    
    # DAPS algorithm with direct struct return
    DAPSResult daps_optimize(
        function[double(double, double, double)] func,
        double x_min, double x_max,
        double y_min, double y_max,
        double z_min, double z_max,
        int max_iter,
        int min_prime_idx,
        int max_prime_idx,
        void* callback_ptr,  # Use void* instead of function template
        double tol
    ) nogil

# Define a callback function type for C
ctypedef double (*c_func_type)(double, double, double) nogil
ctypedef bool (*callback_func_type)(const vector[double]&, double, int) nogil

# C function to call Python callback
cdef extern from "Python.h":
    int PyGILState_Ensure() nogil
    void PyGILState_Release(int state) nogil

# Python-callable wrapper for the C callback function
cdef public bool call_python_callback(const vector[double]& x, double fun_val, int evals, void* py_callback_ptr) with gil:
    cdef long callback_id = <long>py_callback_ptr
    cdef bool result = True
    
    try:
        # Get callback from registry
        callback = _callback_registry.get(callback_id)
        
        if callback is not None:
            # Convert C++ vector to Python list
            x_list = [x[0], x[1], x[2]]
            
            # Call the Python callback
            py_result = callback(x_list, fun_val, evals)
            result = bool(py_result)
    except:
        # On error, we just continue the optimization
        result = True
    
    return result

# Function to create a C++ function that calls a Python function
cdef function[double(double, double, double)] create_function_wrapper(object py_func):
    # Store the Python function in the registry
    cdef int func_id = id(py_func)
    _callback_registry[func_id] = py_func
    
    # Create and return a wrapper function
    cdef function[double(double, double, double)] wrapper = create_py_func_wrapper(<void*>func_id)
    return wrapper

# Wrapper function factory defined in C++
cdef extern from *:
    """
    #include <functional>
    
    // Declare the Python callback function
    extern "C" bool call_python_callback(const std::vector<double>& x, double fun_val, int evals, void* py_callback_ptr);
    
    // Wrapper class for Python functions
    class PyFuncWrapper {
    private:
        void* py_func_ptr;
        
    public:
        PyFuncWrapper(void* func_ptr) : py_func_ptr(func_ptr) {}
        
        double operator()(double x, double y, double z) {
            // Prepare arguments for the Python function
            std::vector<double> v = {x, y, z};
            
            // GIL is acquired in call_python_callback
            // Call the Python function through our callback
            PyGILState_STATE gstate = PyGILState_Ensure();
            
            PyObject* py_func = (PyObject*)py_func_ptr;
            PyObject* args = PyTuple_New(3);
            PyTuple_SET_ITEM(args, 0, PyFloat_FromDouble(x));
            PyTuple_SET_ITEM(args, 1, PyFloat_FromDouble(y));
            PyTuple_SET_ITEM(args, 2, PyFloat_FromDouble(z));
            
            PyObject* result = PyObject_CallObject(py_func, args);
            double value = 0.0;
            
            if (result) {
                value = PyFloat_AsDouble(result);
                Py_DECREF(result);
            }
            
            Py_DECREF(args);
            PyGILState_Release(gstate);
            
            return value;
        }
    };
    
    // Factory function to create a callable wrapper
    std::function<double(double, double, double)> create_py_func_wrapper(void* py_func) {
        return PyFuncWrapper(py_func);
    }
    """
    function[double(double, double, double)] create_py_func_wrapper(void* py_func)

# Python-accessible functions for built-in test functions
def py_recursive_fractal_cliff_valley(double x, double y, double z):
    """Python wrapper for the Recursive Fractal Cliff Valley test function"""
    return recursive_fractal_cliff_valley(x, y, z)

def py_rosenbrock_3d(double x, double y, double z):
    """Python wrapper for the Rosenbrock 3D test function"""
    return rosenbrock_3d(x, y, z)

def py_sphere_function(double x, double y, double z):
    """Python wrapper for the Sphere test function"""
    return sphere_function(x, y, z)

def py_ackley_function(double x, double y, double z):
    """Python wrapper for the Ackley test function"""
    return ackley_function(x, y, z)

def py_rastrigin_function(double x, double y, double z):
    """Python wrapper for the Rastrigin test function"""
    return rastrigin_function(x, y, z)

# Main Python-accessible DAPS function
def daps_cython(func, bounds, options=None, callback=None):
    """
    Python-callable wrapper around the C++ DAPS optimization algorithm
    
    Parameters:
    -----------
    func : callable or str
        Function to minimize or name of built-in test function.
        If callable, it must take three arguments (x, y, z) and return a double.
    bounds : array-like
        Bounds of the search space [x_min, x_max, y_min, y_max, z_min, z_max]
    options : dict, optional
        Additional options:
        - max_iterations : int
            Maximum number of iterations (default: 1000)
        - min_prime_idx_x : int
            Starting prime index for x (default: 0)
        - min_prime_idx_y : int 
            Starting prime index for y (default: 0)
        - min_prime_idx_z : int
            Starting prime index for z (default: 0)
        - verbose : bool
            Whether to print progress (default: False)
        - tolerance : float
            Convergence tolerance (default: 1e-8)
    callback : callable, optional
        Function called after each iteration with current (x, fun_val, nfev)
        Should return True to continue, False to stop
    
    Returns:
    --------
    dict
        Optimization results:
        - 'x' : array, shape (3,)
            Final solution [x, y, z]
        - 'fun' : float
            Function value at the final point
        - 'nfev' : int
            Number of function evaluations
        - 'nit' : int
            Number of iterations
        - 'success' : bool
            Whether the optimization was successful
        - 'final_prime_idx_x' : int
            Final prime index for x dimension
        - 'final_prime_idx_y' : int
            Final prime index for y dimension
        - 'final_prime_idx_z' : int
            Final prime index for z dimension
    """
    cdef dict default_options = {
        'max_iterations': 1000,
        'min_prime_idx_x': 0,
        'min_prime_idx_y': 0,
        'min_prime_idx_z': 0,
        'verbose': False,
        'tolerance': 1e-8
    }
    
    # Merge default options with user options
    cdef dict merged_options = default_options.copy()
    if options is not None:
        merged_options.update(options)
    
    # Extract options
    cdef int max_iterations = merged_options['max_iterations']
    cdef int min_prime_idx_x = merged_options['min_prime_idx_x']
    cdef int min_prime_idx_y = merged_options['min_prime_idx_y']
    cdef int min_prime_idx_z = merged_options['min_prime_idx_z']
    cdef bool verbose = merged_options['verbose']
    cdef double tolerance = merged_options['tolerance']
    
    # Convert bounds to list and validate
    bounds = list(bounds)
    if len(bounds) != 6:
        raise ValueError("Bounds must contain 6 values [x_min, x_max, y_min, y_max, z_min, z_max]")
    
    cdef double x_min = bounds[0]
    cdef double x_max = bounds[1]
    cdef double y_min = bounds[2]
    cdef double y_max = bounds[3]
    cdef double z_min = bounds[4]
    cdef double z_max = bounds[5]
    
    # Store callback in registry if provided
    cdef void* callback_ptr = NULL
    cdef int callback_id
    
    if callback is not None:
        callback_id = id(callback)
        _callback_registry[callback_id] = callback
        callback_ptr = <void*>callback_id

    # Determine the function to use
    cdef function[double(double, double, double)] func_wrapper
    cdef c_func_type c_func = NULL
    
    if isinstance(func, str):
        # Built-in function by name
        if func == 'recursive_fractal_cliff_valley':
            c_func = recursive_fractal_cliff_valley
        elif func == 'rosenbrock_3d':
            c_func = rosenbrock_3d
        elif func == 'sphere_function':
            c_func = sphere_function
        elif func == 'ackley_function':
            c_func = ackley_function
        elif func == 'rastrigin_function':
            c_func = rastrigin_function
        else:
            raise ValueError(f"Unknown built-in function: {func}")
        func_wrapper = <function[double(double, double, double)]>c_func
    elif callable(func):
        # Python function - needs wrapping
        func_wrapper = create_function_wrapper(func)
        # Add to registry to prevent garbage collection
        _callback_registry[id(func)] = func
    else:
        raise TypeError("Function must be a callable or a string naming a built-in function")
    
    # Run the optimization (release GIL for better parallelism)
    cdef DAPSResult result
    with nogil:
        result = daps_optimize(
            func_wrapper,
            x_min, x_max,
            y_min, y_max,
            z_min, z_max,
            max_iterations,
            min_prime_idx_x,
            min_prime_idx_y,
            min_prime_idx_z,
            callback_ptr,
            tolerance
        )
    
    # Extract results
    cdef vector[double] x_best = result.x
    cdef double fun_val = result.fun_val
    cdef int nfev = result.nfev
    cdef int nit = result.nit
    cdef bool success = result.success
    cdef int final_p_idx_x = result.final_prime_idx_x
    cdef int final_p_idx_y = result.final_prime_idx_y
    cdef int final_p_idx_z = result.final_prime_idx_z
    
    # Clean up the callback registry
    if callback is not None:
        _callback_registry.pop(callback_id, None)
    
    # Return results as a Python dictionary
    return {
        'x': [x_best[0], x_best[1], x_best[2]],
        'fun': fun_val,
        'nfev': nfev,
        'nit': nit,
        'success': success,
        'final_prime_idx_x': final_p_idx_x,
        'final_prime_idx_y': final_p_idx_y,
        'final_prime_idx_z': final_p_idx_z
    } 